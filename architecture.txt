Integrated Reactor Model
======================
Total Python files: 112
Total lines of code: 18220
#Update the above

Project Structure:
├── .DS_Store                    # macOS system file
├── .git/                        # Git version control directory
├── architecture.txt             # This project structure documentation
│
├── Integrated Reactor Model/    # Main integrated reactor simulation package
│   ├── .DS_Store               # macOS system file
│   ├── __pycache__/            # Python bytecode cache
│   ├── __init__.py             # Package initialization file (25 lines)
│   ├── inputs.py               # Legacy input parameters (191 lines)
│   ├── main.py                 # Main execution script (175 lines)
│   ├── run_dictionaries.py     # Parameter dictionaries for parametric studies (66 lines)
│   ├── remove_pycache.py       # Utility to clean __pycache__ directories (34 lines)
│   │
│   ├── utils/                  # Centralized utilities and base configuration
│   │   ├── __init__.py        # Package initialization
│   │   └── [utility modules]
│   │
│   ├── Inputs_GUI/             # Main interactive graphical user interface
│   │   ├── __init__.py        # Package initialization
│   │   ├── main.py            # GUI application entry point
│   │   ├── reactor_gui.py     # Main GUI application controller
│   │   ├── components/        # GUI component modules
│   │   │   ├── __init__.py
│   │   │   ├── visualization_tab.py # Main reactor visualization tab
│   │   │   ├── design_tab.py       # Core and pin layout design interface
│   │   │   ├── thermal_tab.py      # Thermal hydraulics controls and results viewer
│   │   │   ├── advanced_tab.py     # Advanced OpenMC and depletion parameters
│   │   │   └── geometry_tab.py     # OpenMC geometry configuration and visualization
│   │   ├── visualization/     # Visualization engines
│   │   │   ├── __init__.py
│   │   │   ├── core_view.py   # Core-level reactor visualization
│   │   │   ├── assembly_view.py # Assembly-level visualization
│   │   │   ├── element_view.py # Individual fuel element visualization
│   │   │   └── plotting_utils.py # Common plotting utilities
│   │   ├── controls/          # Parameter control widgets
│   │   │   ├── __init__.py
│   │   │   └── parameter_controls.py # Input parameter controls and validation
│   │   └── utils/             # GUI utility functions
│   │       ├── __init__.py
│   │       ├── constants.py   # Material colors and GUI constants
│   │       └── export_utils.py # Configuration export utilities
│   │
│   ├── Parametric_GUI/         # Dedicated parametric study generator
│   │   ├── __init__.py        # Package initialization
│   │   ├── main.py            # Standalone parametric GUI entry point
│   │   ├── parametric_app.py  # Main parametric application controller
│   │   ├── parametric_gui_standalone.py # Standalone parametric GUI application
│   │   ├── components/        # Parametric GUI component modules
│   │   │   ├── __init__.py
│   │   │   ├── simple_tab.py  # Simple parameter studies interface
│   │   │   ├── complex_tab.py # Multi-parameter loops interface
│   │   │   └── preview_tab.py # Preview and export interface
│   │   ├── designers/         # Visual parameter designers
│   │   │   ├── __init__.py
│   │   │   ├── core_lattice_designer.py # Interactive core lattice designer
│   │   │   └── depletion_timesteps_designer.py # Depletion timesteps designer
│   │   ├── models/            # Data models for parametric studies
│   │   │   ├── __init__.py
│   │   │   ├── parameter_model.py # Parameter data and metadata model
│   │   │   └── run_configuration.py # Run configuration data model
│   │   └── utils/             # Parametric GUI utilities
│   │       ├── __init__.py
│   │       ├── parameter_utils.py # Parameter processing utilities
│   │       └── export_utils.py # Export functionality for run dictionaries
│   │
│   ├── eigenvalue/             # OpenMC transport calculations
│   │   ├── __init__.py        # Package initialization file
│   │   ├── run.py             # Main eigenvalue calculation runner
│   │   ├── outputs.py         # Results processing and output generation
│   │   ├── find_no_checks.py  # Utility functions
│   │   ├── parametric_study.py # Parametric study functionality
│   │   └── tallies/           # OpenMC tally definitions
│   │       ├── __init__.py
│   │       ├── core_tallies.py # Core flux and reaction rate tallies
│   │       ├── energy_groups.py # Energy group definitions
│   │       ├── irradiation_tallies.py # Irradiation position tallies
│   │       ├── normalization.py # Tally normalization utilities
│   │       └── power_tallies.py # Power distribution tallies
│   │
│   ├── depletion/              # Fuel depletion calculations
│   │   ├── __init__.py
│   │   ├── run_depletion.py   # Main depletion calculation runner
│   │   ├── depletion_operator.py # OpenMC depletion operator setup
│   │   └── depletion_output_text.py # Text output formatting for depletion
│   │
│   ├── plotting/               # Visualization and plotting
│   │   ├── plotall.py         # Main plotting coordinator
│   │   └── functions/         # Individual plotting functions
│   │       ├── depletion.py   # Depletion evolution plots
│   │       ├── entropy.py     # Shannon entropy convergence plots
│   │       ├── flux_maps.py   # 2D/3D neutron flux maps
│   │       ├── flux_traps.py  # Irradiation position flux plots
│   │       ├── normalized_flux_profiles.py # Normalized flux profile plots
│   │       ├── power.py       # Power distribution plots
│   │       └── utils.py       # Plotting utility functions
│   │
│   ├── Reactor/                # Reactor geometry and materials
│   │   ├── materials.py       # Material definitions and properties
│   │   ├── geometry.py        # Main geometry visualization
│   │   └── geometry_helpers/  # Geometry construction utilities
│   │       ├── __init__.py
│   │       ├── core.py        # Core lattice and universe construction
│   │       ├── irradiation_cell.py # Irradiation position geometry
│   │       ├── pin_fuel.py    # Pin-type fuel assembly geometry
│   │       ├── plate_fuel.py  # Plate-type fuel assembly geometry
│   │       └── utils.py       # Geometry utility functions
│   │
│   ├── ThermalHydraulics/      # Thermal hydraulics calculations
│   │   ├── __init__.py
│   │   ├── TH_refactored.py   # Main thermal hydraulics system
│   │   └── code_architecture/ # Modular TH code architecture
│   │       ├── __init__.py
│   │       ├── data_output_code/ # Data output and visualization
│   │       │   ├── __init__.py
│   │       │   ├── output_helpers/ # Output processing utilities
│   │       │   │   ├── __init__.py
│   │       │   │   ├── th_data_extractor.py # Data extraction from TH results
│   │       │   │   ├── th_data_writer.py # Data writing utilities
│   │       │   │   ├── th_plotting.py # TH plotting functions
│   │       │   │   └── th_temperature_profiles.py # Temperature profile plotting
│   │       │   └── plottingcode/ # TH visualization code
│   │       │       ├── __init__.py
│   │       │       ├── plotting_coeffs.py # Heat transfer coefficient plots
│   │       │       ├── plotting_geometry.py # Geometry visualization
│   │       │       ├── plotting_pin.py # Pin assembly TH plots
│   │       │       └── plotting_plate.py # Plate assembly TH plots
│   │       └── helper_codes/   # Core TH calculation modules
│   │           ├── __init__.py
│   │           ├── README.md  # TH module documentation
│   │           ├── convergence/ # Iterative solution convergence
│   │           │   ├── __init__.py
│   │           │   ├── clad_convergence.py # Cladding temperature convergence
│   │           │   ├── coolant_convergence.py # Coolant temperature convergence
│   │           │   ├── fuel_convergence.py # Fuel temperature convergence
│   │           │   ├── iteration.py # Iteration control
│   │           │   └── temperature_convergence.py # Overall temperature convergence
│   │           ├── material_properties/ # Thermophysical properties
│   │           │   ├── __init__.py
│   │           │   ├── clad_properties.py # Cladding material properties
│   │           │   ├── coolant_properties.py # Coolant thermophysical properties
│   │           │   ├── fuel_properties.py # Fuel material properties
│   │           │   └── gap_properties.py # Gap conductance properties
│   │           ├── models/     # Core TH models and data structures
│   │           │   ├── geometry.py # TH geometry model
│   │           │   ├── geometry_validator.py # Geometry validation
│   │           │   ├── material.py # Material model
│   │           │   ├── reactor.py # Reactor model
│   │           │   └── thermal_state.py # Thermal state data structure
│   │           ├── power_calculations/ # Power distribution handling
│   │           │   ├── __init__.py
│   │           │   ├── heat_flux.py # Heat flux calculations
│   │           │   └── power_distribution.py # Axial power distribution
│   │           └── temperature_points/ # Temperature calculation points
│   │               ├── __init__.py
│   │               ├── pin_temperature_points.py # Pin temperature points
│   │               └── plate_temperature_points.py # Plate temperature points
│   │
│   ├── parametric_simulation_20250527_031447/ # Timestamped parametric study directory
│   │   └── [Parametric study results and run directories]
│   │
│   └── simulation_data Linode/ # Remote simulation data storage
│       └── [Simulation data from remote calculations]
│
├── cross_sections/             # Nuclear cross section data
│   ├── .DS_Store              # macOS system file
│   ├── cross_sections.xml     # Main cross section file
│   ├── neutron/               # Neutron cross section data
│   │   ├── c_U_in_UO2.h5     # First neutron cross section file
│   │   ├── Pa233.h5          # Second neutron cross section file
│   │   ├── Pa231.h5          # Third neutron cross section file
│   │   └── ...               # Additional neutron cross section files (90+ more files)
│   └── photon/                # Photon cross section data
│       ├── Bk.h5             # First photon cross section file
│       ├── Cf.h5             # Second photon cross section file
│       ├── Cm.h5             # Third photon cross section file
│       └── ...               # Additional photon cross section files (90+ more files)
│
├── depletion chains/           # Depletion chain data files
│   ├── chain_endfb71_pwr.xml  # ENDF/B-VII.1 depletion chain
│   └── chain_casl_pwr.xml     # CASL depletion chain
│
└── core_selection/             # Core design selection and sampling methods
    ├── main.py                # Main execution entry point for sampling studies (464 lines)
    ├── run_sampling.py        # Sampling method execution controller (260 lines)
    ├── dictionaries_exported.py # Exported parameter dictionaries (649 lines)
    ├── calculate_geometric_parameters.py # Physics parameter calculations (297 lines)
    ├── export_run_dictionaries.py # Dictionary export utilities (139 lines)
    ├── generate_core_configurations.py # Core configuration generator (331 lines)
    ├── visualize_all_samples.py # Comprehensive visualization script (284 lines)
    │
    ├── sampling_methods/      # Sampling algorithm implementations
    │   ├── __init__.py       # Package initialization
    │   ├── base.py           # Base sampling method abstract class
    │   ├── base_parallel.py  # Parallel execution base class
    │   ├── symmetry_utils.py # Symmetry group operations and utilities
    │   │
    │   ├── algorithms/       # Core sampling algorithms
    │   │   ├── __init__.py
    │   │   ├── base_algorithm.py # Base algorithm interface
    │   │   ├── greedy_maxmin.py # Greedy max-min diversity algorithm
    │   │   └── kmeans_nearest.py # K-means clustering for sample selection
    │   │
    │   ├── cache/            # Distance caching utilities
    │   │   ├── __init__.py
    │   │   └── distance_cache.py # Thread-safe distance computation cache
    │   │
    │   ├── distances/        # Distance metric implementations
    │   │   ├── __init__.py
    │   │   ├── base_distance.py # Abstract distance metric interface
    │   │   ├── geometric_distances.py # Euclidean, Manhattan, Jaccard distances
    │   │   └── lattice_distances.py # Configuration-space distance metrics
    │   │
    │   ├── geometric/        # Physics parameter space sampling
    │   │   ├── __init__.py
    │   │   ├── base_qmc.py   # Base quasi-Monte Carlo sampler
    │   │   ├── halton.py     # Halton sequence sampling
    │   │   ├── lhs.py        # Latin Hypercube Sampling
    │   │   ├── random_geometric.py # Random geometric sampling
    │   │   └── sobol.py      # Sobol sequence sampling
    │   │
    │   ├── lattice/          # Configuration space sampling
    │   │   ├── __init__.py
    │   │   ├── base_lattice.py # Base lattice sampling class
    │   │   ├── halton_lattice.py # Halton sampling in lattice space
    │   │   ├── lhs_lattice.py # LHS in configuration space
    │   │   ├── random_lattice.py # Random lattice sampling
    │   │   └── sobol_lattice.py # Sobol sampling in lattice space
    │   │
    │   ├── unified/          # Unified distance-based samplers
    │   │   ├── __init__.py
    │   │   ├── geometric_unified.py # Unified geometric distance samplers
    │   │   └── lattice_unified.py # Unified lattice distance samplers
    │   │
    │   └── utils/            # Sampling utility functions
    │       ├── __init__.py
    │       └── discretization.py # Continuous to discrete mapping utilities
    │
    └── sampler_execution/    # Parallel execution framework
        ├── __init__.py       # Package initialization
        ├── analysis.py       # Diversity analysis and metrics
        ├── constants.py      # Execution constants and configuration
        ├── parallel_executor.py # Multi-process parallel executor
        ├── progress_display.py # Progress bar and status display
        ├── serial_executor.py # Serial execution fallback
        └── task_runner.py    # Individual task execution wrapper

Single Runtime Directory Structure:
============================
The following directories are created automatically during simulation execution:

simulation_data/                # Main simulation output directory
├── Geometry_and_Materials/     # Geometry plots and material definitions
├── ThermalHydraulics/         # Thermal hydraulics results
│   ├── cosine_calculation/    # Cosine power approximation results
│   ├── hot_element/          # Hot element power profile results
│   └── core_average/         # Core average power profile results
├── transport_data/            # OpenMC eigenvalue calculation data
├── flux_plots/               # Neutron flux visualization plots
├── power_plots/              # Power distribution plots
├── depletion_data/           # Depletion calculation outputs
└── depletion_plots/          # Depletion evolution plots

Parametric Runtime Directory Structure:
============================
The following directories are created automatically during a parametric study execution:

parametric_simulation_20250527_031447/           # Timestamped parametric study directory
├── parametric_study_log.txt                     # Log file containing run parameters and results
├── run_1/                                       # Individual parameter case directory
│   ├── Geometry_and_Materials/                  # Case-specific geometry plots
│   ├── ThermalHydraulics/
│   │   ├── cosine_calculation/
│   │   ├── hot_element/
│   │   └── core_average/
│   ├── transport_data/
│   ├── flux_plots/
│   ├── power_plots/
│   ├── depletion_data/
│   └── depletion_plots/
├── run_2/                                       # Second parameter case
│   └── [Same structure as run_1]
├── run_3/                                       # Third parameter case
│   └── [Same structure as run_1]
├── run_4/                                       # Fourth parameter case
│   └── [Same structure as run_1]
├── run_5/                                       # Fifth parameter case
│   └── [Same structure as run_1]
├── run_6/                                       # Sixth parameter case
│   └── [Same structure as run_1]
├── run_7/                                       # Seventh parameter case
│   └── [Same structure as run_1]
├── run_8/                                       # Eighth parameter case
│   └── [Same structure as run_1]
└── run_9/                                       # Ninth parameter case
    └── [Same structure as run_1]

etc.
