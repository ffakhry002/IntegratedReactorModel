#!/usr/bin/env python3
"""
Script to export all selected core configurations to run dictionaries format.
This extracts configurations from all sampling methods and formats them for use in parametric studies.
"""

import json
import os
import pickle
from pathlib import Path

# Get the directory where this script is located
SCRIPT_DIR = Path(__file__).parent.absolute()

def read_sampling_results(pkl_file):
    """Read sampling results from pickle file.

    Parameters
    ----------
    pkl_file : str or Path
        Path to the pickle file containing sampling results

    Returns
    -------
    dict
        Dictionary containing sampling results data
    """
    with open(pkl_file, 'rb') as f:
        data = pickle.load(f)
    return data

def create_grid_from_positions(positions):
    """Create an 8x8 grid with I_n notation from irradiation positions.

    Parameters
    ----------
    positions : list
        List of (row, col) tuples for irradiation positions

    Returns
    -------
    list
        8x8 grid with irradiation positions marked as I_n
    """
    # Initialize 8x8 grid with default fuel configuration
    grid = [['C', 'C', 'F', 'F', 'F', 'F', 'C', 'C'],
            ['C', 'F', 'F', 'F', 'F', 'F', 'F', 'C'],
            ['F', 'F', 'F', 'F', 'F', 'F', 'F', 'F'],
            ['F', 'F', 'F', 'F', 'F', 'F', 'F', 'F'],
            ['F', 'F', 'F', 'F', 'F', 'F', 'F', 'F'],
            ['F', 'F', 'F', 'F', 'F', 'F', 'F', 'F'],
            ['C', 'F', 'F', 'F', 'F', 'F', 'F', 'C'],
            ['C', 'C', 'F', 'F', 'F', 'F', 'C', 'C']]

    # Place irradiation positions with I_n notation
    for i, (row, col) in enumerate(positions, 1):
        grid[row][col] = f'I_{i}'

    return grid

def format_grid_for_output(grid, indent_level=2):
    """Format a grid array with each row on a separate line.

    Parameters
    ----------
    grid : list
        2D list representing the reactor core grid
    indent_level : int, optional
        Indentation level (not currently used), by default 2

    Returns
    -------
    list
        List of formatted strings representing the grid
    """
    indent = '        '  # 8 spaces for alignment with "core_lattice":
    row_indent = '            '  # 12 spaces for array rows

    lines = [indent + '"core_lattice": [']
    for i, row in enumerate(grid):
        row_str = str(row)
        if i < len(grid) - 1:
            lines.append(row_indent + row_str + ',')
        else:
            lines.append(row_indent + row_str)
    lines.append(indent + ']')

    return lines

def main():
    """Main function to export all selected core configurations to run dictionaries format.

    Parameters
    ----------
    None

    Returns
    -------
    None
    """
    # Base directory - use SCRIPT_DIR
    base_dir = SCRIPT_DIR / 'output/samples_picked/pkl'

    # All sampling methods
    sampling_methods = [
        'euclidean_geometric',
        'euclidean_lattice_geometric_diversity',
        'euclidean_lattice',
        'random_geometric',
        'random_lattice'
    ]

    # Start building the output
    output_lines = ['"""',
                    'Run dictionaries for parametric studies.',
                    'Each dictionary entry represents a set of parameters to modify from the base inputs.',
                    'Generated by core_selection export_run_dictionaries.py',
                    '"""',
                    'import numpy as np',
                    '',
                    '# Default run with base inputs',
                    'all_runs = [',
                    '    {',
                    '        "description": "Default inputs"',
                    '    }',
                    '']

    # Track total configurations
    total_configs = 0

    # Process each sampling method
    for method in sampling_methods:
        pkl_file = base_dir / f'{method}_samples.pkl'

        if pkl_file.exists():
            print(f"\nProcessing {method}...")

            # Load the complete results including configurations
            data = read_sampling_results(pkl_file)
            method_name = data['method']

            # Check if irradiation_sets exists in the data
            if 'irradiation_sets' in data:
                irradiation_sets = data['irradiation_sets']
                print(f"  Found {len(irradiation_sets)} configurations")
                total_configs += len(irradiation_sets)

                # Add comment for this method
                output_lines.append(f'')
                output_lines.append(f'    # {method_name.replace("_", " ").title()} samples')

                # Process each configuration
                for i, positions in enumerate(irradiation_sets, 1):
                    grid = create_grid_from_positions(positions)

                    # Add configuration to output
                    output_lines.append('    ,{')
                    output_lines.append(f'        "description": "{method_name}_{i}",')

                    # Add the formatted grid
                    grid_lines = format_grid_for_output(grid)
                    output_lines.extend(grid_lines)

                    output_lines.append('    }')
            else:
                print(f"  Warning: No irradiation_sets found in {pkl_file}")
        else:
            print(f"\nWarning: {pkl_file} not found")

    # Close the all_runs list
    output_lines.append(']')
    output_lines.append('')
    output_lines.append('# Multi-parameter loops')
    output_lines.append('# Generate parametric combinations automatically')
    output_lines.append('# No multi-parameter loops defined')
    output_lines.append('')

    # Write output file - save in core_selection directory
    output_file = SCRIPT_DIR / 'dictionaries_exported.py'
    with open(output_file, 'w') as f:
        f.write('\n'.join(output_lines))

    print(f"\nExport complete! Created {output_file}")
    print(f"Total configurations exported: {total_configs + 1} (including default)")

if __name__ == "__main__":
    main()
